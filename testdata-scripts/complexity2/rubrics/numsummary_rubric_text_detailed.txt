In this assignment a Python script was to be developed which creates a subroutine that returns the 5-number summary of an input array.
The input array should be [9 27 81 86 23 30 57 31 53 0]. The script should contain the array as well as thesubroutine

Rubric:
Functionality
-Unacceptable: The subroutine does not compile or has runtime errors, does not return a 5-number summary.
-Perfect: The subroutine compiles without errors and returns a correct 5-number summary of the input array.
Logic
-Poor: Minimal logic implementation; numerous errors and inefficiencies. The calculation of the 5-number summary is fundamentally incorrect.
-OK: Simple logical structures with some errors; the 5-number summary calculations have minor inaccuracies.
-Competent: Adequate logic flow and correct mathematical application for the 5-number summary; occasional errors or inefficiencies.
-Excellent: Good logical structure and accurate mathematical application for the 5-number summary; minor inefficiencies.
-Perfect: Excellent logical coherence, efficient and accurate calculation of the 5-number summary.
Code Quality
-Poor: Poorly structured and non-idiomatic code; frequent violations of PEP 8 standards.
-OK: Basic structure with some adherence to PEP 8; moderate readability issues.
-Competent: Adequately structured code with minor PEP 8 inconsistencies; readable.
-Excellent: Well-structured, readable code mostly adhering to PEP 8; minor style issues.
-Perfect: Exceptionally well-structured, highly readable, and fully PEP 8 compliant code.
User Input Handling
-Poor: Minimal input validation; frequent errors and crashes on unexpected input.
-OK: Basic input handling with some validation; occasional errors on unexpected input.
-Competent: Adequate handling and validation of user input; infrequent errors.
-Excellent: Good input handling with robust validation and error management.
-Perfect: Excellent, user-friendly input handling with comprehensive validation and error prevention.
Documentation
-Poor: Minimal or no documentation; many sections of code are undocumented.
-OK: Basic documentation covering some parts of the code; lacks detail.
-Competent: Adequate documentation providing a general overview of the subroutine functionality.
-Excellent: Good documentation with detailed explanations of most code sections.
-Perfect: Exceptional documentation throughout with thorough explanations and examples.

-----------------------------------------------------------------------------

The python script to be assessed is below:

